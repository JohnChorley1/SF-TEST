"use strict";
var dsConfig = require('../datasources.json');
var assert = require('assert');
var flash = require('express-flash');
var bcrypt = require('bcrypt');

module.exports = function (app) {

  var router = app.loopback.Router();
  var accessToken = app.models.AccessToken;
  var user = app.models.user;
  var User = app.models.User;
  var PodUser = app.models.PodUser;
  var Client = app.models.Client;
  var Contact = app.models.Contact;
  var Profile = app.models.profile;
  var Review = app.models.Review;
  var Reviewers = app.models.Reviewers;
  var Testimonials = app.models.Testimonial;
  var Booking = app.models.Booking;
//var Users = app.models.User; // Built in model generated by loopback.


  router.get('/after-book-now', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'after-book-now.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.post('/after-book-now', function(req, res) {
    var afterBooking = new Booking();

    afterBooking.FinancialManagerName = req.body.FinancialManagerName;
    afterBooking.FinancialManagerEmail = req.body.FinancialManagerEmail;
    afterBooking.FinancialManagerNumber = req.body.FinancialManagerNumber;
    afterBooking.PurchaseOrderReferences = req.body.PurchaseOrderReference;
    afterBooking.OptionalMessage = req.body.OptionalMessage;

    afterBooking.save(function(err, booking) {
      if (err) {
        res.send(err);
      }

      res.json({message: 'Booking created', booking});
    });
  });

  router.post('/submit/booking', function(req, res) {
    var booking = new Booking();

    booking.companyName = req.body.companyName; // The company name
    booking.companyLocation = req.body.companyLocation; // The Company Location
    booking.travel = req.body.travel; // Is travel required?
    booking.companyWebsite = req.body.companyWebsite; // The companies website
    booking.clientName = req.body.clientName; // The client's name
    booking.clientNumber = req.body.clientNumber; // The client's number
    booking.clientEmail = req.body.clientEmail; // The clients email
    booking.jobRole = req.body.jobRole; // What Job role is required..
    booking.startDate = req.body.startDate; // The requested start date
    booking.endDate = req.body.endDate; // The requested end date
    booking.weeklyHours = req.body.weeklyHours; // The requested weekly hours
    booking.skillSetsRequired = req.body.skillSetsRequired; // The requested skill sets
    booking.equipmentRequired = req.body.equipmentRequired; // The requested equipment required
    booking.personalMessage = req.body.personalMessage; // The personal message
    booking.optionalMessage = req.body.optionalMessage; // The optional message.(not required).

    booking.save(function(err) {
      if (err) {
        res.send(err);
      }
      res.json({message: 'Booking successfully created' + ' ' + booking.companyName + 'Personal Message: ' + booking.personalMessage});
      res.redirect('/after-book-now');
    });
  });

  router.post('/contact-form/submit', function(req, res) {
    console.log(req, res);
    console.log('Received a request.');
  });

  router.get('/clients', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'clientIndex.html';
    res
      .sendFile(fileName, options, function (err) {
        if (err) {
          console.log(err);
          res.status(err.status).end();
        } else {
          console.log('sent', fileName);
        }
      });
  });

  router.get('/api/clients', function (req, res) { // Get the client list
      Client.find(function (err, clients) {
        if (err) {
          res.send(err);
        }

        res.json(clients);
      });
    })
    .post(function (req, res) { // Create a new instance of the model and persist it into the data source.
      Client = new Client();

      Client.name = req.body.name; // Create the clients name

      /************************************* Client contact details **********************************************************/

      Client.contactDetails = req.body.contactDetails; // Creates the Clients contactDetails
      Client.contactDetails.telephone = req.body.contactDetails.telephone; // Create the clients telephone number
      Client.contactDetails.email = req.body.contactDetails.email; // Create the clients email
      Client.contactDetails.twitterUrl = req.body.contactDetails.twitterUrl; // Create the clients twitter url

      /************************************* Info about the Client ***********************************************************/

      Client.about = req.body.about; // Create the clients about
      Client.about.desc = req.body.about.desc; // Creates the clients description
      Client.about.imgUrl = req.body.about.imgUrl; // Creates the clients image url
      Client.about.address1 = req.body.about.address1; // Creates the clients first line of address
      Client.about.address2 = req.body.about.address2; // Creates the clients last line of address
      Client.about.postcode = req.body.about.postcode; // Creates the clients postcode.

      Client.save(function (err) {
        if (err) {
          res.send(err);
        }
        res.json({message: 'Client created', Client});

      });
    });

  router.get('/api/clients/:id', function (req, res) { // Find a model(client) instance by id from the data source
      var id = req.params.id;

      Client.findById(id, function (err, client) {
        if (err)
          res.send(err);

        res.json(client);
      });
    })
    .put(function (req, res) { // Update attributes for a model instance and persist it into the data source
      var id = req.params.id;
      var updates = req.body;

      Client.update({"_id":id}, updates, function(err, numberAffected) {
        if (err)
          return console.log(err);

        console.log('Updated %d client', numberAffected);
        return res.send(202);
      });
    })
    .delete(function (req, res) { // Delete a model(client) by id from the data source
      var id = req.params.id;

      Client.remove({
        _id: id
      }, function (err, clients) {
        if (err)
          res.send(err);

        res.json({message: 'Client successfully deleted', clients});
      });
    });

  router.get('/api/clients/:id/contact', function (req, res) { // Fetches hasOne relation contact.

    })
    .put(function (req, res) { // Update contact of this model
      var id = req.params.id;
    })
    .post(function (req, res) { // Creates a new instance in contact of this model

    })
    .delete(function (req, res) { // Deletes a contact of this model
      var id = req.params.id;
    });


  router.get('/api/clients/count', function (req, res) { // Counts instances of the model matched by where from the data source

  });

  router.get('/api/clients/findOne', function (req, res) { // Find first instance of the model matched by filter from the data source

  });

  router.post('/api/clients/update', function (req, res) { // Update instances of the model matched by where from the data source.

  });

  /******************** Contact Routes for ClientPoc ***********************/
    //--------------------------------------------------------------------//

  router.get('/contacts', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/client/contact',
      dotfile: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'Contacts.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      } else {
        console.log('Sent: ', fileName);
      }
    });
  });

  router.get('/api/contacts', function (req, res) { // Find all instances of the model matched by filter from the data source
      Contact.find(function (err, contacts) {
        if (err) {
          res.send(err);
        }
        res.json(contacts);
      });
    })
    .put(function (req, res) { // Update an existing model instance or insert a new one into the data source
      var id = req.params.id;
      var updates = req.body;

      Contact.update({"_id": id}, updates, function(err, numberAffected) {
        if (err)
          return console.log(err);
          console.log('Updated %d musicians', numberAffected);
          return res.send(202);
      });
    })
    .post(function (req, res) { // Create a new instance of the model and persist it into the data source
      Contact = new Contact();

      Contact.firstName = req.body.firstName; // Creates the contacts first name
      Contact.lastName = req.body.lastName; // Creates the contacts last name

      /********************************** Contact's contact details *********************************************************/

      Contact.contactDetails = req.body.contactDetails; // Create a new contact - contactDetails
      Contact.contactDetails.email = req.body.contactDetails.email; // Create the contacts email
      Contact.contactDetails.phoneNumber = req.body.contactDetails.phoneNumber; // Create the contacts phone number.

      Contact.isBanned = req.body.isBanned; // Create the isBanned for Contact

      Contact.save(function (err) {
        if (err) {
          res.send(err);
        }
        res.json({message: 'Contact created!', Contact});
      });
    });

  router.get('/api/contacts/:id', function (req, res) { // Find a model instance by id from the data source
      var id = req.params.id;
      Contact.findById(id, function (err, contacts) {
        if (err)
          res.send(err);

        res.json(contacts);
      });
    })
    .put(function (req, res) { // Update attributes for a model instance and persist it into the data source
      var id = req.params.id;

      Contact.findById(id, function (err, contacts) {
        if (err) {
          res.send(err);
        }

        contacts.firstName = req.body.firstName; // Update the contacts first name
        contacts.lastName = req.body.lastName; // Update the contacts last name

        /********************************* Contact's contact details ************************************************/

        contacts.contactDetails = req.body.contactDetails; // Update the contacts contact details
        contacts.contactDetails.email = req.body.contactDetails.email; // Update the contacts email address
        contacts.contactDetails.phoneNumber = req.body.contactDetails.phoneNumber; // Update the contacts phoneNumber

        contacts.isBanned = req.body.isBanned; // Update the contacts isBanned status.

        contacts.save(function (err) {
          if (err) {
            res.send(err);
          }

          res.json({message: 'Contact updated!', contacts});
        });
      });
    })
    .delete(function (req, res) { // Delete a model instance by id from the data source
      var id = req.params.id;

      Contact.remove({
        _id: id
      }, function (err, contact) {
        if (err) {
          res.send(err);
        }

        res.json({message: 'Contact successfully deleted', Contact});
      });
    });

  router.get('/api/contacts/:id/exists', function (req, res) { // Check whether a model instance exists in the data source

  });

  router.get('/api/contacts/change-stream', function (req, res) { // Create a change stream

    })
    .post(function (req, res) { // Create a change stream

    });

  router.get('/api/contacts/count', function (req, res) { // Count instances of the model matched by where from the data source

  });

  router.get('/api/contacts/findOne', function (req, res) { // Find first instance of the model matched by filter from the data source

  });

  router.post('/api/contacts/update', function (req, res) { // Update instances of the model matched by where from the data source

  });

  /*************************** PodUser Routes **********************************************************************/
    // ----------------------------------------------------------------------------------------------------------//

  router.get('/api/PodUsers', function (req, res) { // Find all instances of the model matched by filter from the data source
      PodUser.find(function (err, podUser) {
        if (err)
          res.send(err);

        res.json(podUser);
      });
    })
    .put(function (req, res) { // Update existing model instance or insert a new one into the data source
      var id = req.params.id;

      PodUser.findById(id, function (err, podUser) {
        if (err) {
          res.send(err);
        }

        podUser.firstName = req.body.firstName; // Update the pod users first name
        podUser.lastName = req.body.lastName; // Update the pod users last name
        podUser.email = req.body.email; // Update the users email address
        podUser.password = req.body.password; // Update the users password
        podUser.age = req.body.age; // update the users age.
        podUser.isBanned = req.body.isBanned; // Update the users isBanned status.

        /************************** Personal Information ******************************************************************/

        podUser.personal = req.body.personal; // Update the users personal info
        podUser.personal.phoneNumber = req.body.personal.phoneNumber; // Update the users phone number
        podUser.personal.address = req.body.personal.address; // Update the users address
        podUser.personal.address.line1 = req.body.personal.address.line1; // Update the users first line of address
        podUser.personal.address.line2 = req.body.personal.address.line2; // Update the users second line of address if they have one.
        podUser.personal.address.postcode = req.body.personal.address.postcode; // Update the users postcode
        podUser.personal.address.county = req.body.personal.address.county; // Update the users county
        podUser.personal.address.town = req.body.personal.address.town; // Update the users town

        /************************************** Info about the pod user ****************************************************************/

        podUser.info = req.body.info; // Update the users info.
        podUser.info.skills = req.body.info.skills; // Update the users skills
        podUser.info.credits = req.body.info.credits; // Update the users credits
        podUser.info.currentlyEmployed = req.body.info.currentlyEmployed; // Update the users status whether they are employed or not

        /************************************** Qualifications of the user ****************************************************************/

        podUser.qualifications = req.body.qualifications; // Update the users qualifications
        podUser.qualifications.name = req.qualifications.name; // Update the qualification name
        podUser.qualifications.level = req.body.qualifications.level; // Update the level of the qualification
        podUser.qualifications.dateObtained = req.body.qualifications.dateObtained; // Update the date that the qualification was obtained
        podUser.qualifications.locationObtained = req.body.qualifications.locationObtained; // Update the location the qualification was obtained

        podUser.isBooked = req.body.isBooked; // Update the users isBooked status

        podUser.save(function (err) {
          if (err) {
            res.send(err);
          }

          res.send({message: 'Pod User Updated', podUser});
        });
      });
    })
    .post(function (req, res) { // Create a new instance of the model and persist it into the data source
      PodUser = new PodUser();

      PodUser.firstName = req.body.firstName; // Create a PodUsers firstName
      PodUser.lastName = req.body.lastName; // Create a PodUsers lastName
      PodUser.email = req.body.email; // Create a PodUsers email
      PodUser.password = req.body.password; // Create a PodUsers password
      PodUser.age = req.body.age; // Create the PodUsers age
      PodUser.isBanned = req.body.isBanned; // Create the isBanned for the PodUser.

      /*********************************** Personal information ********************************************************************/

      PodUser.personal = req.body.personal; // Creates the PodUser personal information
      PodUser.personal.phoneNumber = req.body.personal.phoneNumber; // Create the PodUser phone numebr
      PodUser.personal.address = req.body.personal.address; // Creates the podUsers address.
      PodUser.personal.address.line1 = req.body.personal.address.line1; // Create the PodUser first line aof address
      PodUser.personal.address.line2 = req.body.personal.address.line2; // Create the PodUser second line of address if they have one.
      PodUser.personal.address.postcode = req.body.personal.address.postcode; // Create the PodUsers postcode.
      PodUser.personal.address.county = req.body.personal.address.county; // Create the PodUsers county
      PodUser.personal.address.town = req.body.personal.address.town; // Create the PodUsers town

      /************************************* Info on the Pod User ******************************************************************/

      PodUser.info = req.body.info; // Creates the PodUsers info.
      PodUser.info.skills = req.body.info.skills; // Creates the PodUsers skills
      PodUser.info.credits = req.body.info.credits; // Created the PodUser credits.
      PodUser.info.currentlyEmployed = req.body.info.currentlyEmployed; // Created the PodUser and checks whether they are currently employed

      /************************************** Qualifications of the PodUser ********************************************************/

      PodUser.qualifications = req.body.qualifications; // Creates the PodUsers qualifications
      PodUser.qualifications.name = req.body.qualifications.name; // Create the qualification name
      PodUser.qualifications.level = req.body.qualifications.level; // Create the qualification level
      PodUser.qualifications.dateObtained = req.body.qualifications.dateObtained; // Creates the date the qualification was obtained
      PodUser.qualifications.locationObtained = req.body.qualifications.locationObtained; // Create the qualification where it was obtained

      PodUser.isBooked = req.body.isBooked; // Create and check whether a PodUser is booked or not.

      PodUser.save(function (err) {
        if (err)
          res.send(err);

        res.json({message: 'Pod User created!', PodUser});
      });
    });

  router.get('/api/PodUsers/:id', function (req, res) { // Find a model instance by id from the data source
      var id = req.params.id;
      PodUser.findById(id, function (err, podUser) {
        if (err)
          res.send(err);

        res.json(podUser);
      });
    })
    .put(function (req, res) { // Update attributes for a model instance and persist it into the data source
      var id = req.params.id;

      PodUser.findById(id, function (err, podUser) {
        if (err) {
          res.send(err);
        }

        podUser.firstName = req.body.firstName; // Update the pod users first name by id
        podUser.lastName = req.body.lastName; // Update the pod users last name by id
        podUser.email = req.body.email; // Update the pod users email by id
        podUser.password = req.body.password; // Update the pod users password by id
        podUser.age = req.body.age; // Update the pod users age by id
        podUser.isBanned = req.body.isBanned; // Update the pod user's status of isBanned by id.

        /******************************** Pod user Personal Information ***********************************************/

        podUser.personal = req.body.personal; // Update the pod users personal information by id
        podUser.personal.phoneNumber = req.body.personal.phoneNumber; // Update the pod users phone number by id
        podUser.personal.address = req.body.personal.address; // Update the pod users address by id
        podUser.personal.address.line1 = req.body.personal.address.line1; // Update the pod users first line of address by id
        podUser.personal.address.line2 = req.body.personal.address.line2; // Update the pod users second line of address by id
        podUser.personal.address.postcode = req.body.personal.address.postcode; // Update the pod users postcode by id
        podUser.personal.address.county = req.body.personal.address.county; // Update the pod users county by id
        podUser.personal.address.town = req.body.personal.address.town; // Update the pod users town by id.

        /********************************* Information about the Pod User *************************************************/

        podUser.info = req.body.info; // Update the Pod users info by id
        podUser.info.skills = req.body.info.skills; // Update the podusers skills by id
        podUser.info.credits = req.body.info.credits; // Update the pod users credits
        podUser.info.currentlyEmployed = req.body.info.currentlyEmployed;

        /********************************* Qualifications the pod user has ************************************************/

        podUser.qualifications = req.body.qualifications; // Update the pod users qualifications by id
        podUser.qualifications.name = req.body.qualifications.name; // Update the qualifications name by id
        podUser.qualifications.level = req.body.qualifications.level; // Update the qualification level by id
        podUser.qualifications.dateObtained = req.body.qualifications.dateObtained; // Update the date in which the qualification was.
        podUser.qualifications.locationObtained = req.body.qualifications.locationObtained; // Update the location the qualification was obtained.

        podUser.isBooked = req.body.isBooked; // Update the status of the pod by isBooked by id.

        podUser.save(function (err) {
          if (err) {
            res.send(err);
          }

          res.json({message: 'Pod User Updated!', podUser});

        });
      });
    })
    .delete(function (req, res) { // Delete a model instance by id from the data source
      var id = req.params.id;

      PodUser.remove({
        _id: id
      }, function (err, podUser) {
        if (err) {
          res.send(err);
        }

        res.json({message: 'PodUser successfully deleted', podUser});
      });
    });

  /************************************** Profile Routes For PodUser ***************************************************/
    // -------------------------------------------------------------------------------------------------------------//

  router.get('/profile', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/pod-search',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'pod-search.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      } else {
        console.log('Sent: ', fileName);
      }
    });
  });

  router.get('/api/profiles', function (req, res) { // Find all instances of the model matched by filter from the data source
      Profile.find(function (err, profiles) {
        if (err) {
          res.send(err);
        }
        res.json(profiles);
      });
    })
    .put(function (req, res) { // Update existing model instance or insert a new one into the data source

    })
    .post(function (req, res) { // Create a new instance of the model and persist it into the data source
      Profile = new Profile();

      Profile.name = req.body.name; // Creates the name of the profile
      Profile.email = req.body.email; // Creates the email for the profile
      Profile.imgUrl = req.body.imgUrl; // Creates the image Url
      Profile.desc = req.body.desc; // Creates the profile description

      /******************************** Profiles Work History **********************************************************************/

      Profile.workHistory = req.body.workHistory; // Creates the profile workHistory
      Profile.workHistory.jobCounter = req.body.workHistory.jobCounter; // Creates the job counter
      Profile.workHistory.companyName = req.body.workHistory.companyName; // Creates the company name
      Profile.workHistory.jobTitle = req.body.workHistory.jobTitle; // Creates the job title
      Profile.workHistory.timeWorked = req.body.timeWorked; // Creates the time worked.

      /********************************* Profiles Pod Work History ********************************************************************/
      Profile.podHistory = req.body.podHistory; // Creates the Pod History Counters.
      Profile.podHistory.jobCounter = req.body.podHistory.jobCounter; // Creates the job Counter
      Profile.podHistory.hoursCounter = req.body.podHistory.hoursCounter; // Creates the hours counter.

      /********************************* Profiles Pod Preferences **************************************************************************/
      Profile.preferences = req.body.preferences; // Creates the references.
      Profile.preferences.distanceWillingToTravel = req.body.preferences.distanceWillingToTravel; // Create the preferred travel distance.
      Profile.preferences.preferredTimes = req.body.preferences.preferredTimes; // Creates the preferred times.
      Profile.preferences.preferredDays = req.body.preferences.preferredDays; // Creates the preferred days.

      Profile.save(function (err) {
        if (err) {
          res.send(err);
        }
        res.json({message: 'Profile created', Profile});
      });
    });

  router.get('/api/profiles/:id', function (req, res) { // Find a model instance by id from the data source
      var id = req.params.id;
      Profile.findById(id, function (err, profiles) {
        if (err) {
          res.send(err);
        }
        res.json(profiles, id);
      });
    })
    .head(function (req, res) { // Check whether a model instance exists in the data source
      var id = req.params.id;
    })
    .put(function (req, res) { // Update attributes for a model instance and persist it into the data source
      var id = req.params.id;

      Profile.findById(function (err, profiles) {
        if (err) {
          res.send(err);
        }

        profiles.name = req.body.name; // Update the profile name by id
        profiles.email = req.body.email; // Update the profiles email by id
        profiles.imgUrl = req.body.imgUrl; // Update the profiles image url
        profiles.desc = req.body.desc; // Update the profiles description by id

        /****************************** Profiles Work History **************************************************/

        profiles.workHistory = req.body.workHistory; // Update the work history the profile
        profiles.workHistory.jobCounter = req.body.workHistory.jobCounter; // Update the job counter on the profile by id
        profiles.workHistory.companyName = req.body.workHistory.companyName; // Update the company name on the profile by id
        profiles.workHistory.jobTitle = req.body.workHistory.jobTitle; // Update the job Title on the profile by id
        profiles.workHistory.timeWorked = req.body.workHistory.timeWorked; // Update the time worked on the profile by id

        /****************************** Profiles Pod Work History ***********************************************/

        profiles.podHistory = req.body.podHistory; // Update the profiles pod work history by id
        profiles.podHistory.jobCounter = req.body.podHistory.jobCounter; // Update the job counter on the profile by id
        profiles.podHistory.hoursCounter = req.body.podHistory.hoursCounter; // Update the hours counter on the profile by id

        /******************************* Profile Pod Preferences **************************************************/

        profiles.preferences = req.body.preferences; // Update the pods profile preferences
        profiles.preferences.distanceWillingToTravel = req.body.preferences.distanceWillingToTravel; // Update the pod profile distance willing to travel
        profiles.preferences.preferredTimes = req.body.preferences.preferredTimes; // Update the profile's preferred times by id
        profiles.preferences.preferredDays = req.body.preferences.preferredDays; // Update the preferred days on the profile by id

        profiles.save(function (err) {
          if (err) {
            res.send(err);
          }

          res.json({message: 'Profile updated', profiles});
        });
      });
    })
    .delete(function (req, res) { // Delete a model instance by id from the data source
      var id = req.params.id;
    });

  /*************************************************** Review Routes ***********************************************************/
    // ---------------------------------------------------------------------------------------------------------------------//

  router.get('/reviews', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/reviews',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'reviews.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      } else {
        console.log('Sent: ', fileName);
      }
    });
  });

  router.get('/api/reviews', function (req, res) { // Find all instances of the model matched by filter from the data source
      Review.find(function (err, reviews) {
        if (err) {
          res.send(err);
        }
        res.json(reviews);
      });
    })
    .put(function (req, res) { // Update existing model instance or insert a new one into the data source

    })
    .post(function (req, res) { // Create a new instance of the model and persist it into the data source
      Review = new Review();

      Review.date = req.body.date; // Create the date of the review.
      Review.rating = req.body.rating; // Create the ratings.
      Review.comments = req.body.comments; // Create the comments;

      Review.save(function (err) {
        if (err) {
          res.send(err);
        }
        res.json({message: 'Review created', Review});
      });
    });

  router.get('/api/reviews/:id', function (req, res) { // Find a model instance by id from the data source
      var id = req.params.id;
      Review.findById(id, function (err, reviews) {
        if (err)
          res.send(err);

        res.json(reviews);
      });
    })
    .head(function (req, res) { // Check whether a model instance exists in the data source
      var id = req.params.id;
    })
    .put(function (req, res) { // Update attributes for a model instance and persist it into the data source
      var id = req.params.id;
    })
    .delete(function (req, res) { // Delete a model instance by id from the data source
      var id = req.params.id;
    });

  /*********************************************** Reviewers Routes *********************************************************/
    // ------------------------------------------------------------------------------------------------------------------//

  router.get('/reviewers', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/reviewers',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'reviewers.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      } else {
        console.log('Sent ', fileName);
      }
    });
  });

  router.get('/api/reviewers', function (req, res) { // Find all instances of the model matched by filter from the data source
      Reviewers.find(function (err, reviewer) {
        if (err) {
          res.send(err);
        }
        res.json(reviewer);
      });
    })
    .put(function (req, res) { // Update an existing model instance or insert a new one into the data source

    })
    .post(function (req, res) { // Create a new instance of the model and persist it into the data source

    });

  router.get('/api/reviewers/:id', function (req, res) { // Find a model instance by id from the data source
      var id = req.params.id;

      Reviewers.findById(id, function (err, reviewer) {
        if (err)
          res.send(err);

        res.json(reviewer);
      });
    })
    .head(function (req, res) { // Check whether a model instance exists in the data source
      var id = req.params.id;
    })
    .put(function (req, res) { // Update attributes for a model instance and persist it into the data source
      var id = req.params.id;
    })
    .delete(function (req, res) { // Delete a model instance by id from the data source
      var id = req.params.id;
    });


  /***************************** Testimonials Routes **********************************************************************/
    // ----------------------------------------------------------------------------------------------------------------//

  router.get('/api/testimonials', function (req, res) { // Find all instances of the model by filter from the data source
      Testimonials.find(function (err, testimonial) {
        if (err) {
          res.send(err);
        }
        res.json(testimonial);
      });
    })
    .put(function (req, res) { // Update an existing model instance or insert a new one into the data source

    })
    .post(function (req, res) { // Create a new instance of the model and persist it into the data source
      Testimonials = new Testimonials();


    });

  router.get('/api/testimonials/:id', function (req, res) { // Find a model instance by id from the data source
      var id = req.params.id;
      Testimonials.findById(id, function (err, testimonial) {
        if (err) {
          res.send(err);
        }
        res.json(testimonial);
      });
    })
    .head(function (req, res) { // Check whether a model instance exists in the data source
      var id = req.params.id;
    })
    .put(function (req, res) { // Update attributes for a model instance and persist it into the data source
      var id = req.params.id;
    })
    .delete(function (req, res) { // Delete a model instance by id from the data source
      var id = req.params.id;
    });

  /*************************************** users Routes *****************************************************/
    // -------------------------------------------------------------------------------------------------//

  router.get('/users', function (req, res) {
    user.find(function (err, users) {
      if (err) {
        res.send(err);
      }
      res.json(users);
    });
  });

  router.get('/api/users', function (req, res) { // Find all instances of the model matched by filter from the data source
      user.find(function (err, users) {
        if (err) {
          res.send(err);
        }
        res.json(users);
      });
    })
    .put(function (req, res) { // Update an existing model or instance or insert a new one into the data source
      user = new user();

      user.username = req.body.username; // Create the users username
      user.password = req.body.password; // Create the users password
      user.email = req.body.email; // Create the users email

      user.save(function (err) {
        if (err)
          res.send(err);

        res.json({message: 'user created!', user});
      });
    })
    .post(function (req, res) { // Create a new instance of the model and persist it into the data source

    });

  router.get('/api/users/:id', function (req, res) { // Find a model instance by id from the data source
      var id = req.params.id;

      user.findById(id, function (err, users) {
        if (err) {
          res.send(err);
        }
        res.json(users);
      });
    })
    .head(function (req, res) { // Check whether a model instance exists in the data source
      var id = req.params.id;
    })
    .put(function (req, res) { // Update attributes for a model instance and persist  it into the data source
      var id = req.params.id;
    })
    .delete(function (req, res) { // Delete a model instance by id from the data source
      var id = req.params.id;
    });


  /**************************************** User Routes (Don't get confused with the capital U!) ********************************/
// ----------------------------------------------------------------------------------------------------------------------//

  /*router.get('/api/Users', function(req, res) { // Find all instances of the model matched by filter from the data source
   User.find(function(err, Users) {
   if (err)
   res.send(err);

   res.json(Users);
   });
   })
   .put(function(req, res) { // Update existing model instance or insert a new one into the data source

   })
   .post(function(req, res) { // Create a new instance of the model and persist it into the data source

   });

   router.get('/api/Users/:id', function(req, res) { // Find a model instance by id from the data source

   })
   .head(function(req, res) { // Check whether a model instance exists in the data source

   })
   .put(function(req, res) { // Update attributes for a model instance and persist it into the data source

   })
   .delete(function(req, res) { // Delete a model instance by id from the data source

   });

   router.get('/api/Users/:id/accessTokens', function(req, res) { // Queries accessTokens of User

   })
   .post(function(req, res) { // Creates a new instance in accessTokens of this model

   })
   .delete(function(req, res) { // Deletes all accessTokens of this model

   });

   router.get('/api/Users/:id/accessTokens/:fk', function(req, res) { // Find a related item by id for accessTokens

   })
   .put(function(req, res) { // Update a related item by id for accessTokens

   })
   .delete(function(req, res) { // Delete a related item by id for accessTokens

   });

   router.get('/api/Users/:id/accessTokens/count', function(req, res) { // Counts accessTokens of User

   });

   router.get('/api/Users/:id/exists', function(req, res) { // Check whether a model instance exists in the data source

   });

   router.get('/api/Users/change-stream', function(req, res) { // Create a change stream

   })
   .post(function(req, res) { // Create a change stream

   });

   router.get('/api/Users/confirm', function(req, res) { // Confirm a user registration with email verification token

   });

   router.get('/api/Users/count', function(req, res) { // Count instances of the model matched by where from the data source

   });

   router.get('/api/Users/findOne', function(req, res) { // Find first instance of the model matched by filter from the data source

   });

   router.post('/api/Users/login', function(req, res) { // Login a user with username/email and password

   });

   router.post('/api/Users/logout', function(req, res) { // Logout a user with accessToken

   });

   router.post('/api/Users/reset', function(req, res) { // Reset password for a user with email

   });

   router.post('/api/Users/update', function(req, res) { // Update instance of the model matched by where from the data source

   });*/

  router.get('/book-now', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'book-now.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });


  router.get('/contact-us', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'contact-us.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/form', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'form.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/historic-bookings', function (req, res) {

    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'historic-bookings.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/login', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'login.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/my-profile', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'my-profile.html';
    res.sendFile(fileName, options, function(err) {
      if (err) {
        console.log(err);
        re.status(err.status).end();
      } else {
        console.log('File Sent: ', fileName);
      }
    });
  });

  router.get('/current-bookings', function (req, res) {

    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'current-bookings.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });

  });

  router.get('/404', function (req, res) {

    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'my-profile.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/500', function (req, res) {

    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = '500.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/403', function (req, res) {

    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = '403.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/my-profile', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'my-profile.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/pod-profile', function (req, res) {

    var options = {
      root: __dirname + '/../../client/views',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'pod-profile.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });


  router.get('/pod-search', function (req, res) {

    var options = {
      root: __dirname + '/../../client/views/',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'pod-search.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/showUsers', function (req, res) {

    var PodUser = app.models.PodUser;

    PodUser.find({}, function (err, data) {
      if (err)
        console.log(err);
      res.json(data);
    });
  });

  router.get('/poduser/:email', function (req, res) {
    var PodUser = app.models.PodUser;

    if (req.params.email) {
      PodUser.find({
        email: req.params.email
      }, function (err, docs) {
        if (err) console.log(err);
        res.json(docs);
      });
    }
  });

  router.post('/PodUsers/register', function (req, res) {
    var podUser = new PodUser({
      firstName: req.body.firstName,
      lastName: req.body.lastName,
      email: req.body.email,
      password: req.body.password
    });
    podUser.save(function (err) {
      if (err) {
        return err;
      }
    });
  });

  router.post('/login/', function(req, res) {
        var password = req.body.password;

        PodUser.findOne({where: {email: req.body.email}, limit: 1}, function(err, document) {
          if (err)
            console.log('Error');
          //var hashedPass = db.password;
          //bcrypt
          //var checkLogin = bcrypt.compareSync(password, hashedPass); // true

          if (password === document.password) {

              req.session.loggedIn = true;
              req.session.firstName = document.firstName;
              req.session.podid = document.id;

              console.log('Welcome' + ' ' + req.session.firstName + '!');

              res.status(200).send({
                  loggedIn: true
              });
           } else {
                console.log('Error invalid username or password');
                res.status(400).send({
                  loggedIn: false

                });
            }
        });
    });

    /*User.findOne({email: req.body.email}, function (err, document) {
      if (hash === document.password) {
        res.status(200).send({
          loggedIn: true
        });
      }
      else {
        console.log('Login Error');
        res.status(401).send({
          loggedIn: false
        });
      }
    });*/


  router.get('/logout', function (req, res) {
    var AccessToken = app.models.AccessToken;
    var token = new AccessToken({
      id: req.query.access_token
    });
    token.destroy();

    res.redirect('/');
  });

  /************************************* Admin pages **********************************************************/


  router.get('/api/admin/client/edit/byid', function (req, res) {
    var options = {
      root: __dirname + '/../../server/views/admin/client/src/edit',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'edit-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/api/admin/client/find/findAll', function (req, res) { // display all clients
    var options = {
      root: __dirname + '/../../server/views/admin/client/src/find/',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-all.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/api/admin/client/find/findByid', function (req, res) { //find client by id
    var options = {
      root: __dirname + '/../../client/views/admin/client/src/find',
      dotfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent:', fileName);
      }
    });
  });

  router.get('/api/admin/contacts/find/findByid', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/contacts/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/contacts/contacts', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/contacts/src',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'contacts.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/podUsers/findAll', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/PodUsers/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-all.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/podUsers/find/findByid', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/PodUsers/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/profiles/find/findAll', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/profiles/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-all.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/profiles/find/findByid', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/profiles/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/reviews/find/findAll', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/reviews/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-all.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/reviews/find/findByid', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/reviews/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/reviewers/find/findAll', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/reviewers/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-all.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/reviewers/find/findByid', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/reviewers/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/testiomonials/find/findAll', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/testimonials/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-all.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/testiomonials/find/findByid', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/testimonials/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/users/find/findAll', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/users/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-all.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });

  router.get('/api/admin/users/find/findByid', function (req, res) {
    var options = {
      root: __dirname + '/../../client/views/admin/users/src/find',
      dottfiles: 'deny',
      headers: {
        'x-timestamp': Date.now(),
        'x-sent': true
      }
    };
    var fileName = 'find-by-id.html';
    res.sendFile(fileName, options, function (err) {
      if (err) {
        console.log(err);
        res.status(err.status).end();
      }
      else {
        console.log('Sent', fileName);
      }
    });
  });


  app.use(router);
};
